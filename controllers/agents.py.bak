import os
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# AI assistant imports
from agno.agent import Agent, RunResponse
from agno.models.nebius import Nebius
from agno.tools.yfinance import YFinanceTools
from agno.tools.duckduckgo import DuckDuckGoTools

# Load environment variables
load_dotenv()
NEBIUS_API_KEY: str = os.getenv("NEBIUS_API_KEY")

if not NEBIUS_API_KEY:
    raise ValueError("Please provide a NEBIUS API key")


web_search_agent = Agent(
    name="web_agent",
    role="search the web for information based on the user given input",
    model=Nebius(id="deepseek-ai/DeepSeek-R1-0528", api_key=NEBIUS_API_KEY),
    tools=[
        DuckDuckGoTools(search=True, news=True),

    ],
    instructions=[
        "You are a very professional web search AI agent",
        "your job is to search the web for information based on the user given input",
        "provide exact information to the user available on the web",
    ]
)

financial_agent = Agent(
    name="financial_agent",
    role="provide accurate financial data and analysis for stocks and investments",
    model=Nebius(id="Qwen/Qwen3-32B", api_key=NEBIUS_API_KEY),
    tools=[
        YFinanceTools(stock_price=True,
                    analyst_recommendations=True,
                    stock_fundamentals=True, 
                    company_info=True, 
                    technical_indicators=True, 
                    historical_prices=True,
                    key_financial_ratios=True,
                    income_statements=True,
                    ),
    ],
    instructions=[
        "You are a sophisticated financial advisor AI agent specializing in stock market data and analysis.",
        "When users ask about stocks or companies:",
        "1. ALWAYS provide the current stock price first",
        "2. ALWAYS include at least one fundamental metric (e.g., P/E ratio, market cap, dividend yield)",
        "3. Format your response with proper markdown (tables, headers, etc.)",
        "4. Use bullet points for key metrics when appropriate",
        "5. Include contextual information about the company's recent performance",
        "6. Avoid generic descriptions when specific financial data is requested",
        "7. For stock queries, always use your YFinance tools, NOT general knowledge",
        "8. Structure your response with clear sections (e.g., ## Current Price, ## Key Metrics)",
        "9. Never hallucinate financial data - if you don't have it, say so explicitly"
    ],
    markdown=True
)

multi_ai = Agent(
    team=[web_search_agent, financial_agent],
    model=Nebius(id="meta-llama/Llama-3.3-70B-Instruct", api_key=NEBIUS_API_KEY),
    instructions=[
        "You are a financial advisory system that provides accurate and detailed financial information.",
        "When responding to financial or stock-related questions:",
        "1. Prioritize responses from the financial_agent for market data and stock information",
        "2. Use web_search_agent only for supplementary information not covered by financial tools",
        "3. Always ensure financial data (especially stock prices and metrics) comes from reliable financial tools",
        "4. Never hallucinate financial data - only provide verified information from your tools",
        "5. Format responses with proper markdown (tables, headers, bullet points) for readability",
        "6. For stock queries, always include both current price AND at least one fundamental metric",
        "7. Structure responses with clear sections for different types of financial information"
    ],
    markdown=True,
)
